---
description: 
globs: 
alwaysApply: false
---
# ACME Reimbursement Engine Optimization Guide

## Overview
This rule provides systematic guidance for improving the [run.sh](mdc:run.sh) implementation based on reverse-engineering analysis of [public_cases.json](mdc:public_cases.json). Note: when the ./eval.sh script runs it uses the private_cases.json file...which means that we should not be ONLY optimizing for the public_cases.json.

## Current Implementation Status
The current [run.sh](mdc:run.sh) produces outputs that are significantly off from expected values. Key test cases:
- Case 1: 3 days, 93 miles, $1.42 → Expected: $364.51, Current: varies
- Case 2: 1 day, 55 miles, $3.60 → Expected: $126.06, Current: varies  
- Case 3: 5 days, 130 miles, $306.90 → Expected: $574.10, Current: varies

## Critical Formula Components Discovered

### 1. Mileage Rate Tiers (CONFIRMED via [deep_analysis.py](mdc:deep_analysis.py))
```bash
# WRONG (current): 0.58/0.35/0.25 per mile
# CORRECT: ~1.24/0.37/0.29 per mile
- 0-100 miles: ~$1.24/mile
- 101-500 miles: ~$0.37/mile  
- 500+ miles: ~$0.29/mile
```

### 2. Base Per-Diem Calculation
```bash
# NOT flat $100/day - varies by trip characteristics
# Analysis shows ~$100-130/day depending on factors
```

### 3. Efficiency Bonus (150-220 MPD Sweet Spot)
```bash
# Kevin's theory CONFIRMED: 89 cases in 150-220 MPD range show higher outputs
# Implementation needed for miles_per_day between 150-220
```

### 4. Receipt Processing Rules
```bash
# Current 0.8 factor and 600 threshold are WRONG
# Analysis suggests different diminishing returns curve
# Small receipt penalty exists for <$25-30/day
```

## Systematic Improvement Process

### Phase 1: Fix Core Components
1. **Update mileage rates** to 1.24/0.37/0.29
2. **Implement proper tiered calculation** (not just rate switching)
3. **Test against low-receipt cases** to isolate base+mileage effects

### Phase 2: Add Missing Features  
1. **Efficiency bonus** for 150-220 MPD range
2. **Receipt diminishing returns** with correct curve
3. **Small receipt penalties** for <$25/day

### Phase 3: Fine-Tune Edge Cases
1. **Windfall effects** for receipts ending in .49/.99 (+$3)
2. **High mileage penalties** for certain combinations
3. **Trip length adjustments** beyond simple per-day rates

## Testing Strategy
```bash
# Always test these benchmark cases after changes:
./run.sh 3 93 1.42    # Expected: 364.51
./run.sh 1 55 3.6     # Expected: 126.06  
./run.sh 5 130 306.9  # Expected: 574.10

# Use analysis scripts to validate patterns:
python3 deep_analysis.py  # Check if changes align with data patterns
```

## Error Pattern Analysis
When outputs are wrong, check:
1. **Too high**: Likely mileage rates or base calculation error
2. **Too low**: Missing efficiency bonuses or receipt processing issues  
3. **Inconsistent**: Missing interaction effects between components

## Key Files for Reference
- [public_cases.json](mdc:public_cases.json) - 1,000 test cases for validation
- [INTERVIEWS.md](mdc:INTERVIEWS.md) - Employee theories (Kevin's efficiency theory confirmed)
- [PRD.md](mdc:PRD.md) - Business context and requirements
- [deep_analysis.py](mdc:deep_analysis.py) - Data analysis revealing true patterns
- [my-files/run_2.sh](mdc:my-files/run_2.sh) - Previous implementation with syntax fixes

## Next Actions Priority
1. **IMMEDIATE**: Fix mileage rate tiers (biggest impact)
2. **HIGH**: Implement efficiency bonus for 150-220 MPD  
3. **MEDIUM**: Correct receipt processing curve
4. **LOW**: Add windfall and edge case handling

## Success Metrics
- Accuracy within 10% on benchmark cases
- Passes evaluation against all 1,000 public cases
- Matches patterns identified in data analysis
